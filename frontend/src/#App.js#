import React, { useEffect, useState } from "react";
import { BrowserRouter as Router, Routes, Route, useNavigate, useParams } from "react-router-dom";

import Layout from "./components/layouts/SingleLayout.js"; // Layout component
import Home from "./components/home/Home.js"; // Example page
import Profile from "./components/users/Profile.js"; // Profile page
import Login from "./components/auths/Login.js"; // Login page
import Feed from "./components/posts/Feed.js";
import Modal from "./components/auths/Modal.js"; // Modal component
import Register from "./components/auths/Register.js"; // Register page
import { AuthProvider } from "./components/contexts/AuthenticationContext.js"; // Authentication context
import ProtectedRoute from "./components/auths/ProtectedRoute.js"; // ProtectedRoute component
import ContactsList from "./components/messages/Contacts.js";
import ChatWindow from "./components/messages/Chatwindow.js";

function App() {
    // Retrieve the stored theme from localStorage, default to 'light' if not found
    const savedTheme = localStorage.getItem("theme") || "dark"; // Default theme
    const [theme, setTheme] = useState(savedTheme);

    useEffect(() => {
        document.documentElement.setAttribute("data-theme", theme);
    }, [theme]);

    // Toggle the theme and store the selected theme in localStorage
    const toggleTheme = () => {
        const newTheme = theme === "light" ? "dark" : "light";
        setTheme(newTheme);
        localStorage.setItem("theme", newTheme); // Save theme to localStorage
    };

    const contacts = [
        { id: 1, name: "John Doe", avatar: "https://via.placeholder.com/40" },
        { id: 2, name: "Jane Smith", avatar: "https://via.placeholder.com/40" },
        { id: 3, name: "Alice Johnson", avatar: "https://via.placeholder.com/40" },
    ];

    // Define the random profile picture
    const randomProfilePicture2 = `https://lh3.googleusercontent.com/a/ACg8ocIEhBavg338BUW_S26EeP447xr4BxlXvX2leqXoG9FEdUGvnphK=s288-c-no`;

    return (
        <AuthProvider>
            <Router>
                <Layout theme={theme} toggleTheme={toggleTheme}>
                    <Routes>
                        <Route path="/login" element={<Login />} />
                        <Route path="/register" element={<Register />} />
                        <Route
                            path="/messages"
                            element={<ContactsPage contacts={contacts} />}
                        />
                        <Route
                            path="/messages/:contactId"
                            element={<ChatWithParams contacts={contacts}  />}
                        />
                        {/* Protected Route */}
                        <Route
                            path="/profile"
                            element={
                                <ProtectedRoute>
                                    <Profile
                                        profilePicture={randomProfilePicture2}
                                        theme={theme}
                                        toggleTheme={toggleTheme}
                                    />
                                </ProtectedRoute>
                            }
                        />
                        {/* Example Feed Route */}
                        <Route path="/feed" element={<Feed theme={theme} />} />
                        {/* Default Home route */}
                        <Route path="/" element={<Home />} />
                    </Routes>
                </Layout>
            </Router>
        </AuthProvider>
    );
}

// Separate functional component to handle contact selection and navigation
function ContactsPage({ contacts }) {
    const navigate = useNavigate();

    const handleSelectContact = (contact) => {
        navigate(`/messages/${contact.id}`);
    };

    return <ContactsList contacts={contacts} onSelectContact={handleSelectContact} />;
}

// Functional component for ChatWindow with URL parameters
function ChatWithParams({ contacts }) {
  const { contactId } = useParams();
  const recipient = contacts.find((contact) => contact.id === parseInt(contactId));

  return <ChatWindow recipient={recipient} theme={theme} toggleTheme={toggleTheme} />;
}

export default App;
